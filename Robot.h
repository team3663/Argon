// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#ifndef _ROBOT_H
#define _ROBOT_H
#include "WPILib.h"
#include "Commands/Command.h"
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "Commands/DriveCommand.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/AutonomousCommand.h"
#include "Commands/FarAutonomousCommand.h"
#include "Commands/AutonomousNinetyCommand.h"
#include "Subsystems/Climber.h"
#include "Subsystems/DiskManagement.h"
#include "Subsystems/DriveTrain.h"
#include "Subsystems/Lights.h"
#include "Subsystems/Photoelectric.h"
#include "Subsystems/Pitch.h"
#include "Subsystems/Pneumatics.h"
#include "Subsystems/RangeFinder.h"
#include "Subsystems/Shooter.h"
#include "Subsystems/Targetting.h"
#include "DriverStation.h"
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "OI.h"

class Targetting;

class Robot : public IterativeRobot {
public:
	Command *autonomousCommand;
	SendableChooser* autoChooser;
	static SendableChooser* targetChooser;
	DriverStation* driverStation;
	static OI *oi;
	LiveWindow *lw;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	static DriveTrain* driveTrain;
	static Shooter* shooter;
	static DiskManagement* diskManagement;
	static Pitch* pitch;
	static Pneumatics* pneumatics;
	static Photoelectric* photoelectric;
	static Climber* climber;
	static Lights* lights;
	static RangeFinder* rangeFinder;
	static Targetting* targetting;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	virtual void RobotInit();
	virtual void AutonomousInit();
	virtual void AutonomousPeriodic();
	virtual void TeleopInit();
	virtual void TeleopPeriodic();
	virtual void TestPeriodic();
	virtual void DisabledPeriodic();
	virtual void DisabledInit();
	void UpdateStatus();
};
#endif
