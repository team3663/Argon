// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "EncoderDriveCommand.h"
EncoderDriveCommand::EncoderDriveCommand(float distanceToDrive, float maxSpeed, float decayFactor) {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain);

	this->distanceToDrive = distanceToDrive;
	this->maxSpeed    = maxSpeed;    // maximum speed for driving
	this->decayFactor = decayFactor; // how rapidly to decrease speed as approaching target
	driveSpeed      = 0;      // speed value for robot drive
	curve           = 0;      // curve value for robot drive
	driveProgress   = 0;      // distance traveled so far
	reachedEndpoint = false;  // whether command is completed or not
	
	if (distanceToDrive < 0)
		driveDirection = -1;
	else
		driveDirection = 1;
	
	SetTimeout(10.0);  // set the command to end at 10 seconds if not yet completed
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

void EncoderDriveCommand::Initialize() {
	//check how far we want to go and make it out of 100%
	
	Robot::driveTrain->DriveEncoderReset();  // reset encoder to zero to start;
	//Robot::driveTrain->Drive(0.5,0);         // short drive to start the encoder counting
	//Wait(0.5);                               // drive a half second
	Robot::driveTrain->Drive(maxSpeed * driveDirection, 0.0);
}

void EncoderDriveCommand::Execute() {
	// get distance traveled as reported by right encoder
//	driveProgress = Robot::driveTrain->GetRightDistance();
	
	// set drive speed
//	driveSpeed = ((distanceToDrive - (driveProgress * driveDirection))/distanceToDrive) * decayFactor * maxSpeed;
//	if (driveSpeed > maxSpeed) driveSpeed  = maxSpeed; // just in case, make sure it doesn't drive too fast
//	if (driveSpeed < 0.40) driveSpeed = 0.40;     // don't drive any slower than that or it doesn't move
    // check that both encoders are measuring the same
	// This creates a ratio around 1, then subtracts to make it vary around 0 instead
	// Use this as the correcting curve in the drive command
	//curve = (Robot::driveTrain->GetRightDistance() / Robot::driveTrain->GetLeftDistance()) - 1;
	// now drive
//	Robot::driveTrain->Drive(-driveSpeed * driveDirection, 0.0);
	Robot::driveTrain->Drive(maxSpeed * driveDirection, 0.0);
}
// Make this return true when this Command no longer needs to run execute()
bool EncoderDriveCommand::IsFinished() {
	if ((driveDirection * Robot::driveTrain->GetRightDistance()) >= (driveDirection * distanceToDrive)) // if we are at or past the target distance
		return true;
	else if (IsTimedOut()) // if the time has run out
		return true;
	else
		return false;
}
// Called once after isFinished returns true
void EncoderDriveCommand::End() {
	Robot::driveTrain->Stop();
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void EncoderDriveCommand::Interrupted() {
	End();
}
