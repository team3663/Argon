// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "OI.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AdjustShootSpeedCommand.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/CheckCompressorSwitch.h"
#include "Commands/CheckForLinesCommand.h"
#include "Commands/ClimbDownCommand.h"
#include "Commands/ClimbUpCommand.h"
#include "Commands/DecreasePitchCommand.h"
#include "Commands/DriveCommand.h"
#include "Commands/FlipperCommand.h"
#include "Commands/NudgeFlipperCommand.h"
#include "Commands/GearShiftCommand.h"
#include "Commands/GearShiftDown.h"
#include "Commands/GearShiftUp.h"
#include "Commands/IncreasePitchCommand.h"
#include "Commands/ShootPistonCommand.h"
#include "Commands/SpinCommand.h"
#include "Commands/SpinDownCommand.h"
#include "Commands/SpinUpCommand.h"
#include "Commands/TargettingCommand.h"
#include "Commands/TurnLeftCommand.h"
#include "Commands/TurnRightCommand.h"
#include "Commands/ResetGyroCommand.h"
#include "Commands/PIDDriveCommand.h"
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
OI::OI() {
	// Process operator interface input here.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	driveJoystick = new Joystick(1);
	
	gearShift = new JoystickButton(driveJoystick, 2);
	gearShift->WhenPressed(new GearShiftCommand());
	
	resetGyro = new JoystickButton(driveJoystick, 3);
	resetGyro->WhenPressed(new ResetGyroCommand());
	
	flipFrisbees = new JoystickButton(driveJoystick, 6);
	flipFrisbees->WhenPressed(new FlipperCommand());
	
	nudgeFrisbees = new JoystickButton(driveJoystick, 7);
	nudgeFrisbees->WhenPressed(new NudgeFlipperCommand());
	
	climbDown = new JoystickButton(driveJoystick, 10);
	climbDown->WhileHeld(new ClimbDownCommand());
	
	climbUp = new JoystickButton(driveJoystick, 11);
	climbUp->WhileHeld(new ClimbUpCommand());
	
	pidDrive = new JoystickButton(driveJoystick, 4);
	pidDrive->WhenPressed(new PIDDriveCommand(120));
	///////////////////////////////////////////////////////////////////
	
	targetJoystick = new Joystick(2);
	
	target = new JoystickButton(targetJoystick, 10);
	target->WhenPressed(new TargettingCommand());
	
	turnLeft = new JoystickButton(targetJoystick, 4);
	turnLeft->WhileHeld(new TurnLeftCommand());
	
	turnRight = new JoystickButton(targetJoystick, 5);
	turnRight->WhileHeld(new TurnRightCommand());
	
	changeShooter = new JoystickButton(targetJoystick, 11);
	changeShooter->WhenPressed(new SpinCommand());
	
	flipFrisbees = new JoystickButton(targetJoystick, 6);
	flipFrisbees->WhenPressed(new FlipperCommand());
	
	nudgeFrisbees = new JoystickButton(targetJoystick, 7);
	nudgeFrisbees->WhenPressed(new NudgeFlipperCommand());
	
	decreasePitch = new JoystickButton(targetJoystick, 2);
	decreasePitch->WhileHeld(new DecreasePitchCommand());
	
	increasePitch = new JoystickButton(targetJoystick, 3);
	increasePitch->WhileHeld(new IncreasePitchCommand());
	
	shootPiston = new JoystickButton(targetJoystick, 1);
	shootPiston->WhileHeld(new ShootPistonCommand());
	
	decreaseShootSpeed = new JoystickButton(targetJoystick, 8);
	decreaseShootSpeed->WhenPressed(new AdjustShootSpeedCommand(-0.025));
	
	increaseShootSpeed = new JoystickButton(targetJoystick, 9);
	increaseShootSpeed->WhenPressed(new AdjustShootSpeedCommand(0.025));
     
        // SmartDashboard Buttons
	SmartDashboard::PutData("AutonomousCommand", new AutonomousCommand());
	SmartDashboard::PutData("DriveCommand", new DriveCommand());
	SmartDashboard::PutData("SpinUpCommand", new SpinUpCommand());
	SmartDashboard::PutData("ShootPistonCommand", new ShootPistonCommand());
	SmartDashboard::PutData("SpinDownCommand", new SpinDownCommand());
	SmartDashboard::PutData("IncreasePitchCommand", new IncreasePitchCommand());
	SmartDashboard::PutData("DecreasePitchCommand", new DecreasePitchCommand());
	SmartDashboard::PutData("CheckCompressorSwitch", new CheckCompressorSwitch());
	SmartDashboard::PutData("ClimbUpCommand", new ClimbUpCommand());
	SmartDashboard::PutData("ClimbDownCommand", new ClimbDownCommand());
	SmartDashboard::PutData("FlipperCommand", new FlipperCommand());
	SmartDashboard::PutData("GearShiftCommand", new GearShiftCommand());
	SmartDashboard::PutData("SpinCommand", new SpinCommand());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	SmartDashboard::PutData("IncreaseShootSpeedCommand", new AdjustShootSpeedCommand(0.025));
	SmartDashboard::PutData("DecreaseShootSpeedCommand", new AdjustShootSpeedCommand(-0.025));

}
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
Joystick* OI::getDriveJoystick() {
	return driveJoystick;
}
Joystick* OI::getTargetJoystick() {
	return targetJoystick;
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
float OI::GetX()
{
	return driveJoystick->GetX();
}
float OI::GetY()
{
	return driveJoystick->GetY();
}
