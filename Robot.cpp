// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Robot.h"
#include "Commands/TeleopInitCommand.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
DriveTrain* Robot::driveTrain = 0;
Shooter* Robot::shooter = 0;
DiskManagement* Robot::diskManagement = 0;
Pitch* Robot::pitch = 0;
Pneumatics* Robot::pneumatics = 0;
Photoelectric* Robot::photoelectric = 0;
Climber* Robot::climber = 0;
Lights* Robot::lights = 0;
RangeFinder* Robot::rangeFinder = 0;
OI* Robot::oi = 0;
Targetting* Robot::targetting = 0;
SendableChooser* Robot::targetChooser = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	driveTrain = new DriveTrain();
	shooter = new Shooter();
	diskManagement = new DiskManagement();
	pitch = new Pitch();
	pneumatics = new Pneumatics();
	photoelectric = new Photoelectric();
	climber = new Climber();
	lights = new Lights();
	rangeFinder = new RangeFinder();
	targetting = new Targetting();
	autonomousFinished = false;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();
	driverStation = DriverStation::GetInstance();
	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommand();
	autoChooser = new SendableChooser();
	autoChooser->AddDefault("Shoot Autonomous", new AutonomousCommand());
	autoChooser->AddObject("Left Autonomous", new FarAutonomousCommand());
	autoChooser->AddObject("Right Driving Autonomous", new AutonomousNinetyCommand());
	
	targetChooser = new SendableChooser();
	targetChooser->AddDefault("Three Point Target", new int(3));
	targetChooser->AddObject("Two Point Target", new int(2));
	targetChooser->AddObject("Any Target", new int(1));
	
	SmartDashboard::PutData("Choose Autonomous Command:", autoChooser);
	SmartDashboard::PutData("Choose Target", targetChooser);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
  }
	
void Robot::AutonomousInit() {
	autonomousCommand = static_cast<Command*>(autoChooser->GetSelected());
	autonomousCommand->Start();
	Robot::lights->TargetLightOn();
}
	
void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
	Robot::UpdateStatus();
}
	
void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// this line or comment it out.
	autonomousCommand->Cancel();
	if (autonomousFinished == true)
	{
		TeleopInitCommand().Run();
		autonomousFinished = false;
	}
	Robot::lights->TargetLightOn();
}
	
void Robot::TeleopPeriodic() {
	if (autonomousCommand != NULL)
		Scheduler::GetInstance()->Run();
	Robot::UpdateStatus();
}
void Robot::TestPeriodic() {
	lw->Run();
}
void Robot::DisabledPeriodic(){
	Robot::UpdateStatus();
}
void Robot::DisabledInit(){
	Robot::lights->TargetLightOff();
	autonomousCommand->Cancel();
}
void Robot::UpdateStatus(){
	Robot::shooter->UpdateStatus();
	Robot::photoelectric->UpdateStatus();
	Robot::pitch->UpdateStatus();
	Robot::rangeFinder->UpdateStatus();
	Robot::driveTrain->UpdateStatus();
	Robot::pneumatics->UpdateStatus();
	SmartDashboard::PutNumber("Battery Voltage", driverStation->GetBatteryVoltage());
	SmartDashboard::PutNumber("Remaining Time", driverStation->GetMatchTime());
	//SmartDashboard::PutData(Scheduler::GetInstance());
}
START_ROBOT_CLASS(Robot);
