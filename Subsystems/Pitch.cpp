// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Pitch.h"
#include "../Robotmap.h"
Pitch::Pitch() : Subsystem("Pitch") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	pitchMotor = RobotMap::pitchPitchMotor;
	limitSwitchMax = RobotMap::pitchLimitSwitchMax;
	limitSwitchMin = RobotMap::pitchLimitSwitchMin;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Pitch::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
void Pitch::SetPitch(float changeRate){
/*	
	double startTime = GetClock();
	double finishTime = startTime + seconds;
	
	if((isIncreasing && !limitSwitchMax->Get()) ||
	   (!isIncreasing && !limitSwitchMin->Get())) {
		pitchMotor->Set(isIncreasing ? -0.8 : 0.8);
		//Loop until time expires or limit switch is triggered
		while(finishTime > GetClock()){
			//Stop if a limit switch is triggered
			if((isIncreasing && limitSwitchMax->Get()) ||
			   (!isIncreasing && limitSwitchMin->Get()))
				break;
			Wait(0.01);
		}
		
		pitchMotor->Set(0.0);
	}
	*/
	//pitchMotor->Set(isIncreasing ? 0.9 : -0.8);
	pitchMotor->Set(changeRate);
}
	
bool Pitch::UpperLimitReached()
{
	return limitSwitchMax->Get();
}

bool Pitch::LowerLimitReached()
{
	return limitSwitchMin->Get();
}

void Pitch::Stop()
{
	pitchMotor->Set(0.0);
}

void Pitch::IncreasePitch(float increaseRate){
	if (increaseRate > 1.0)
	{
		increaseRate = 1.0;
	}
	SetPitch(increaseRate);
}
void Pitch::DecreasePitch(float decreaseRate){
	if (decreaseRate < -1.0)
	{
		decreaseRate = -1.0;
	}
	SetPitch(decreaseRate);
}
void Pitch::UpdateStatus(){
		std::string limitOutput = "";
	
	if (limitSwitchMax->Get())
		limitOutput = "Maximum Height";
	else if (limitSwitchMin->Get())
		limitOutput = "Minimum Height";
	else
		limitOutput = "";
	
	SmartDashboard::PutString("Pitch Height", limitOutput);
}
