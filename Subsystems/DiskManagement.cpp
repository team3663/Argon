// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "DiskManagement.h"
#include "../Robotmap.h"
DiskManagement::DiskManagement() : Subsystem("DiskManagement") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	shootSolenoid1 = RobotMap::diskManagementShootSolenoid1;
	shootSolenoid2 = RobotMap::diskManagementShootSolenoid2;
	flipperSolenoid1 = RobotMap::diskManagementflipperSolenoid1;
	flipperSolenoid2 = RobotMap::diskManagementFlipperSolenoid2;
	shooterLightSensor = RobotMap::photoelectricShooterSensor;
	_timeFired = 0.0;
	_shotsFired = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void DiskManagement::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

float DiskManagement::GetTimeSinceLastShot()
{
	return GetClock() - _timeFired;
}

unsigned int DiskManagement::GetShotNum()
{
	return _shotsFired;
}
void DiskManagement::SetShootPiston(bool extendPiston){
	shootSolenoid1->Set(!extendPiston);
	shootSolenoid2->Set(extendPiston);
}
void DiskManagement::SetFlipperPiston(bool extendPiston){
	flipperSolenoid1->Set(extendPiston);
	flipperSolenoid2->Set(!extendPiston);
}
void DiskManagement::ExtendShootPiston(){
	_timeFired = GetClock();
	_shotsFired++;
	Robot::targetting->WriteCurrentData();
	SetShootPiston(true);
}
void DiskManagement::RetractShootPiston(){
	SetShootPiston(false);
}
void DiskManagement::ExtendFlipperPiston(){
	SetFlipperPiston(true);
}
void DiskManagement::RetractFlipperPiston(){
	SetFlipperPiston(false);
}
unsigned int DiskManagement::GetHopperStatus(){
	return shooterLightSensor->Get();
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
