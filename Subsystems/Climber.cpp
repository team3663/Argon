// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Climber.h"
#include "../Commands/ClimbUpCommand.h"
#include "../Robotmap.h"
Climber::Climber() : Subsystem("Climber") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	climbMotorController = RobotMap::climberClimbMotorController;
	upperLimitSwitch = RobotMap::climberUpperLimitSwitch;
	lowerLimitSwitch = RobotMap::climberLowerLimitSwitch;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Climber::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
/*void Climber::MoveClimber(bool movingUp)
{
	if(movingUp)
	{
		if(upperLimitSwitch->Get())
		{
			climbMotorController->Set(0.0); //this should lift robot
		}
		else
		{
			climbMotorController->Set(1.0);
		}
	}
	else
	{
		if(lowerLimitSwitch->Get())
		{
			climbMotorController->Set(0.0); //bring robot down
		}
		else
		{
			climbMotorController->Set(-1.0);
		}
	}
}*/
void Climber::Stop() {
	climbMotorController->Set(0.0);
}
void Climber::Climb(bool isIncreasing, float seconds){
	
	double startTime = GetClock();
	double finishTime = startTime + seconds;
	
	if((isIncreasing && !upperLimitSwitch->Get()) ||
	   (!isIncreasing && !lowerLimitSwitch->Get())) {
		climbMotorController->Set(isIncreasing ? -1.0 : 1.0);
		//Loop until time expires or limit switch is triggered
		while(finishTime > GetClock()){
			//Stop if a limit switch is triggered
			if((isIncreasing && upperLimitSwitch->Get()) ||
			   (!isIncreasing && lowerLimitSwitch->Get()))
				break;
			Wait(0.01);
		}
		
		climbMotorController->Set(0.0);
	}
}
	
void Climber::ClimbUp(float seconds){
	Climb(false, seconds);
}
void Climber::ClimbDown(float seconds){
	Climb(true, seconds);
}
